apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "net.fred.feedex"
        compileSdkVersion 25
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 64
        versionName "1.9.7"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

adbOptions {
    timeOutInMs 20 * 60 * 1000  // 20 minutes
    installOptions "-d","-t"
    }

    lintOptions {
        // if true, stop the gradle build if errors are found
        abortOnError true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions{
        unitTests.all {
            jacoco{
                includeNoLocationClasses = true
            }
        }
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest'){
        reports{
            xml.enabled = true
            html.enabled = true
        }
        def testTaskName = "clickme"
        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories = files([mainSrc])
        classDirectories = files([debugTree])
        executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
    }

//    Properties properties = new Properties()
//    properties.load(project.rootProject.file('local.properties').newDataInputStream())
//
//    signingConfigs {
//        debug {
//            if (properties.getProperty("KEYSTORE_PATH") != null) {
//                storeFile file(properties.getProperty("KEYSTORE_PATH"))
//                storePassword properties.getProperty("KEYSTORE_PASSWORD")
//                keyAlias properties.getProperty("KEY_ALIAS")
//                keyPassword properties.getProperty("KEY_PASSWORD")
//            }
//        }
//        release {
//            if (properties.getProperty("KEYSTORE_PATH") != null) {
//                storeFile file(properties.getProperty("KEYSTORE_PATH"))
//                storePassword properties.getProperty("KEYSTORE_PASSWORD")
//                keyAlias properties.getProperty("KEY_ALIAS")
//                keyPassword properties.getProperty("KEY_PASSWORD")
//            }
//        }
//    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
        }
    }
}

repositories {
    maven {
        url 'http://dl.bintray.com/amulyakhare/maven'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.google.android.gms:play-services-gcm:11.0.4'
    compile 'org.jsoup:jsoup:+'
    compile 'com.github.bumptech.glide:glide:+'
    compile 'com.amulyakhare:com.amulyakhare.textdrawable:+'
    compile 'com.squareup.okhttp3:okhttp-urlconnection:+'
    compile 'com.android.support:support-v4:25.3.1'
    // Stetho core
    compile 'com.facebook.stetho:stetho:1.5.0'
    //If you want to add a network helper
    compile 'com.facebook.stetho:stetho-okhttp:1.5.0'

    testCompile 'junit:junit:4.12'

    androidTestCompile 'com.android.support:support-annotations:25.3.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
}

